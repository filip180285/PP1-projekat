package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, CONST, NEW, PRINT, READ, RETURN, VOID, GOTO;
terminal String IDENTIFIER;
terminal Integer NUMBER; 
terminal Character CHARACTER;
terminal Integer BOOLEAN;
terminal PLUS, MINUS, MULTIPLICATION, DIVISION, MODULUS, EQUALS, INCREMENT, DECREMENT;
terminal SEMICOLON, COLON, COMMA, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;

nonterminal Program, ConstVarDeclList, ConstDeclList, VarDeclList, MethodDecl;
nonterminal Type, ConstDeclOneOrMore, ConstDecl, Constant, VarDeclOneOrMore, VarDecl;
nonterminal MethodVarDeclList, StatementList;
nonterminal Statement;
nonterminal DesignatorStatement, Designator, Expr, ExprList, Term, TermList, FactorSign, DesignatorStatementList;
nonterminal MayPrintNumConst, MayDesignator;
nonterminal Factor, UnaryMinus, Assignop, Addop, Mulop;



/*** Program = "program" ident {ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}". ***/

Program ::= (Program) PROGRAM IDENTIFIER ConstVarDeclList LEFT_BRACE MethodDecl RIGHT_BRACE;

ConstVarDeclList ::= (ConstVarDeclList_CONST) ConstVarDeclList ConstDeclList
					 | 
					 (ConstVarDeclList_VAR) ConstVarDeclList VarDeclList
					 |
					 (ConstVarDeclList_EPSILON) /* epsilon */
					 ;


					 
/*** ConstDecl = "const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst | charConst | boolConst)} ";". ***/

ConstDeclList ::= (ConstDeclList) CONST Type ConstDeclOneOrMore SEMICOLON;	// const int x = 2;	const int y = 3, z = 5;

ConstDeclOneOrMore ::= (ConstDeclOneOrMore_MORE) ConstDecl COMMA ConstDeclOneOrMore
					   |
					   (ConstDeclOneOrMore_ONE) ConstDecl;

ConstDecl ::= (ConstDecl) IDENTIFIER EQUALS Constant;

Constant ::= (Constant_NUMBER) NUMBER
			 | 
			 (Constant_CHARACTER) CHARACTER
			 |
			 (Constant_BOOLEAN) BOOLEAN;
			 
Type ::= (Type) IDENTIFIER;



/*** VarDecl = Type ident ["[" "]"] {"," ident ["[" "]"]} ";". ***/

VarDeclList ::= (VarDeclList) Type VarDeclOneOrMore SEMICOLON;	// int x; int y, z, niz[];

VarDeclOneOrMore ::= (VarDeclOneOrMore_MORE) VarDecl COMMA VarDeclOneOrMore
					 |
					 (VarDeclOneOrMore_ONE) VarDecl;

VarDecl ::= (VarDecl_VAR) IDENTIFIER
			|
			(VarDecl_ARRAY) IDENTIFIER LEFT_BRACKET RIGHT_BRACKET;
			
	
			
/*** MethodDecl = (Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}". ***/

MethodDecl ::= (MethodDecl) VOID IDENTIFIER LEFT_PARENTHESIS RIGHT_PARENTHESIS MethodVarDeclList LEFT_BRACE StatementList RIGHT_BRACE;

MethodVarDeclList ::= (MethodVarDeclList_VAR) MethodVarDeclList VarDeclList
					  |
					  (MethodVarDeclList_EPSILON) /* epsilon */
					  ;

StatementList ::= (StatementList_STATEMENTS) StatementList Statement
				  |
				  (StatementList_EPSILON) /* epsilon */
				  ;
				  
				  
				  
/*** Statement = DesignatorStatement ";"
				| "return" [Expr] ";"
				| "read" "(" Designator ")" ";"
				| "print" "(" Expr ["," numConst] ")" ";"
				| "{" {Statement} "}".
 ***/				  

Statement ::= (Statement_DesignatorStatement) DesignatorStatement SEMICOLON
			  |
			  (Statement_RETURN) RETURN SEMICOLON
			  |
			  (Statement_READ) READ LEFT_PARENTHESIS Designator RIGHT_PARENTHESIS SEMICOLON
			  |
			  (Statement_PRINT) PRINT LEFT_PARENTHESIS Expr MayPrintNumConst RIGHT_PARENTHESIS SEMICOLON
			  |
			  (Statement_StatementList) LEFT_BRACE StatementList RIGHT_BRACE;
			  
MayPrintNumConst ::= (MayPrintNumConst_NUMBER) COMMA NUMBER
					 |
					 (MayPrintNumConst_EPSILON) /* epsilon */
					 ;
			  
			  

/*** DesignatorStatement = Designator (Assignop Expr | "(" [ActPars] ")" | "++" | "--")
						   |
						  "[" [Designator] {"," [Designator]}"]" "=" Designator.
 ***/
 
DesignatorStatement ::= (DesignatorSt_Assign) Designator Assignop Expr
					    | 
					    (DesignatorStat_INC) Designator INCREMENT
					    |
					    (DesignatorStat_DEC) Designator DECREMENT
						|
						(DesignatorStatement_List) LEFT_BRACKET DesignatorStatementList RIGHT_BRACKET EQUALS Designator;
						
DesignatorStatementList ::= (DesignatorStatementList_MORE)  DesignatorStatementList COMMA MayDesignator
							|
							(DesignatorStatementList_ONE) MayDesignator;

MayDesignator ::= (MayDesignator_Designator) Designator
				  |
				  (MayDesignator_EPSILON) /* epsilon */
				  ;							


/*** Expr = ["-"] Term [Addop Term]. ***/

Expr ::= (Expr) ExprList;
		
ExprList ::= (ExprList_ONE) Term
			 |
			 (ExprList_MORE) ExprList Addop Term;
		


/*** Term = Factor {Mulop Factor}. ***/

Term ::= (Term) TermList;
		
TermList ::= (TermList_ONE) FactorSign
			 |
			 (TermList_MORE) TermList Mulop FactorSign;			  
			  
		
			  
/*** Factor = Designator
			  | numConst
			  | charConst
 			  | boolConst
			  | "new" Type ( "[" Expr "]" )
			  | "(" Expr ")".
***/
			  
FactorSign ::= (FactorSign) UnaryMinus Factor;

UnaryMinus ::= (UnaryMinus_MINUS) MINUS
			   |
			   (UnaryMinus_EPSILON) /* epsilon */
			   ;

Factor ::= (Factor_Designator) Designator
		   |
		   (Factor_NUMBER) NUMBER
		   |
		   (Factor_CHARACTER) CHARACTER
		   |
		   (Factor_BOOLEAN) BOOLEAN
		   |
		   (Factor_NEW) NEW Type LEFT_BRACKET Expr RIGHT_BRACKET
		   |
		   (Factor_Expr) LEFT_PARENTHESIS Expr RIGHT_PARENTHESIS
		   ;



/*** Designator = ident {"[" Expr "]"}. ***/

Designator ::= (Designator_ONE) IDENTIFIER
			   |
			   (Designator_ARRAY) IDENTIFIER LEFT_BRACKET Expr RIGHT_BRACKET;



/*** Assignop = "=". ***/

Assignop ::= (Assignop) EQUALS;



/*** Addop = "+" | "-". ***/

Addop ::= (Addop_PLUS) PLUS
		  |
		  (Addop_MINUS) MINUS
		  ;



/*** Mulop = "*" | "/" | "%". ***/

Mulop ::= (Mulop_MUL) MULTIPLICATION
		  |
		  (Mulop_DIV) DIVISION
		  |
		  (Mulop_MOD) MODULUS
		  ;
