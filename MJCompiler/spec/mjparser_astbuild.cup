package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, CONST, NEW, PRINT, READ, RETURN, VOID;
terminal String IDENTIFIER;
terminal Integer NUMBER; 
terminal Character CHARACTER;
terminal Integer BOOLEAN;
terminal PLUS, MINUS, MULTIPLICATION, DIVISION, MODULUS, EQUALS, INCREMENT, DECREMENT;
terminal SEMICOLON, COMMA, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;

nonterminal Program Program;
nonterminal ConstVarDeclList ConstVarDeclList;
nonterminal ConstDeclList ConstDeclList;
nonterminal VarDeclList VarDeclList;
nonterminal MethodDecl MethodDecl;
nonterminal MethodName MethodName;
nonterminal Type Type;
nonterminal ConstDeclOneOrMore ConstDeclOneOrMore;
nonterminal ConstDecl ConstDecl;
nonterminal VarDeclOneOrMore VarDeclOneOrMore;
nonterminal VarDecl VarDecl;
nonterminal MethodVarDeclList MethodVarDeclList;
nonterminal StatementList StatementList;
nonterminal Statement Statement;
nonterminal DesignatorStatement DesignatorStatement;
nonterminal Designator Designator;
nonterminal DesignatorArrayName DesignatorArrayName;
nonterminal Expr Expr;
nonterminal Term Term;
nonterminal FactorSign FactorSign;
nonterminal DesignatorStatementList DesignatorStatementList;
// Expr, ExprList, Term, TermList,
nonterminal MayPrintNumConst MayPrintNumConst;
nonterminal MayDesignator MayDesignator;
nonterminal Factor Factor;
nonterminal UnaryMinus UnaryMinus;
nonterminal Assignop Assignop;
nonterminal Addop Addop;
nonterminal Mulop Mulop;

nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgramName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Constant;


/*** Program = "program" ident {ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}". ***/

Program ::= (Program) PROGRAM ProgramName:P1 ConstVarDeclList:C2 LEFT_BRACE MethodDecl:M3 RIGHT_BRACE {: RESULT=new Program(P1, C2, M3); RESULT.setLine(P1left); :};

ProgramName ::= (ProgramName) IDENTIFIER:I1 {: RESULT=new ProgramName(I1); RESULT.setLine(I1left); :};

ConstVarDeclList ::= (ConstVarDeclList_CONST) ConstVarDeclList:C1 ConstDeclList:C2 {: RESULT=new ConstVarDeclList_CONST(C1, C2); RESULT.setLine(C1left); :}
					 | 
					 (ConstVarDeclList_VAR) ConstVarDeclList:C1 VarDeclList:V2 {: RESULT=new ConstVarDeclList_VAR(C1, V2); RESULT.setLine(C1left); :}
					 |
					 (ConstVarDeclList_EPSILON) {: RESULT=new ConstVarDeclList_EPSILON(); :} /* epsilon */
					 ;


					 
/*** ConstDecl = "const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst | charConst | boolConst)} ";". ***/

ConstDeclList ::= (ConstDeclList) CONST Type:T1 ConstDeclOneOrMore:C2 SEMICOLON {: RESULT=new ConstDeclList(T1, C2); RESULT.setLine(T1left); :};	// const int x = 2;	const int y = 3, z = 5;

ConstDeclOneOrMore ::= (ConstDeclOneOrMore_MORE) ConstDecl:C1 COMMA ConstDeclOneOrMore:C2 {: RESULT=new ConstDeclOneOrMore_MORE(C1, C2); RESULT.setLine(C1left); :}
					   |
					   (ConstDeclOneOrMore_ONE) ConstDecl:C1 {: RESULT=new ConstDeclOneOrMore_ONE(C1); RESULT.setLine(C1left); :};

ConstDecl ::= (ConstDecl) IDENTIFIER:I1 EQUALS Constant:C2 {: RESULT=new ConstDecl(I1, C2); RESULT.setLine(I1left); :};

Constant ::= (Constant_NUMBER) NUMBER:N1 {: RESULT=new Constant_NUMBER(N1); RESULT.setLine(N1left); :}
			 | 
			 (Constant_CHARACTER) CHARACTER:C1 {: RESULT=new Constant_CHARACTER(C1); RESULT.setLine(C1left); :}
			 |
			 (Constant_BOOLEAN) BOOLEAN:B1 {: RESULT=new Constant_BOOLEAN(B1); RESULT.setLine(B1left); :};
			 
Type ::= (Type) IDENTIFIER:I1 {: RESULT=new Type(I1); RESULT.setLine(I1left); :};



/*** VarDecl = Type ident ["[" "]"] {"," ident ["[" "]"]} ";". ***/

VarDeclList ::= (VarDeclList) Type:T1 VarDeclOneOrMore:V2 SEMICOLON {: RESULT=new VarDeclList(T1, V2); RESULT.setLine(T1left); :};	// int x; int y, z, niz[];

VarDeclOneOrMore ::= (VarDeclOneOrMore_MORE) VarDecl:V1 COMMA VarDeclOneOrMore:V2 {: RESULT=new VarDeclOneOrMore_MORE(V1, V2); RESULT.setLine(V1left); :}
					 |
					 (VarDeclOneOrMore_ONE) VarDecl:V1 {: RESULT=new VarDeclOneOrMore_ONE(V1); RESULT.setLine(V1left); :};

VarDecl ::= (VarDecl_VAR) IDENTIFIER:I1 {: RESULT=new VarDecl_VAR(I1); RESULT.setLine(I1left); :}
			|
			(VarDecl_ERROR) error:e
			{: parser.report_error("OPORAVAK od greske u definiciji promenljive izvrsen u liniji " + eleft, null);  :} {: RESULT=new VarDecl_ERROR(); :}
		    | 
			(VarDecl_ARRAY) IDENTIFIER:I1 LEFT_BRACKET RIGHT_BRACKET {: RESULT=new VarDecl_ARRAY(I1); RESULT.setLine(I1left); :};
			
	
			
/*** MethodDecl = (Type | "void") ident "(" [FormPars] ")" {VarDecl} "{" {Statement} "}". ***/

MethodDecl ::= (MethodDecl) VOID MethodName:M1 LEFT_PARENTHESIS RIGHT_PARENTHESIS MethodVarDeclList:M2 LEFT_BRACE StatementList:S3 RIGHT_BRACE {: RESULT=new MethodDecl(M1, M2, S3); RESULT.setLine(M1left); :};

MethodName ::= (MethodName) IDENTIFIER:I1 {: RESULT=new MethodName(I1); RESULT.setLine(I1left); :};

MethodVarDeclList ::= (MethodVarDeclList_VAR) MethodVarDeclList:M1 VarDeclList:V2 {: RESULT=new MethodVarDeclList_VAR(M1, V2); RESULT.setLine(M1left); :}
					  |
					  (MethodVarDeclList_EPSILON) {: RESULT=new MethodVarDeclList_EPSILON(); :} /* epsilon */
					  ;

StatementList ::= (StatementList_STATEMENTS) StatementList:S1 Statement:S2 {: RESULT=new StatementList_STATEMENTS(S1, S2); RESULT.setLine(S1left); :}
				  |
				  (StatementList_EPSILON) {: RESULT=new StatementList_EPSILON(); :} /* epsilon */
				  ;
				  
				  
				  
/*** Statement = DesignatorStatement ";"
				| "return" [Expr] ";"
				| "read" "(" Designator ")" ";"
				| "print" "(" Expr ["," numConst] ")" ";"
				| "{" {Statement} "}".
 ***/				  

Statement ::= (Statement_DesignatorStatement) DesignatorStatement:D1 SEMICOLON {: RESULT=new Statement_DesignatorStatement(D1); RESULT.setLine(D1left); :}
			  |
			  (Statement_RETURN) RETURN SEMICOLON {: RESULT=new Statement_RETURN(); :}
			  |
			  (Statement_READ) READ LEFT_PARENTHESIS Designator:D1 RIGHT_PARENTHESIS SEMICOLON {: RESULT=new Statement_READ(D1); RESULT.setLine(D1left); :}
			  |
			  (Statement_PRINT) PRINT LEFT_PARENTHESIS Expr:E1 MayPrintNumConst:M2 RIGHT_PARENTHESIS SEMICOLON {: RESULT=new Statement_PRINT(E1, M2); RESULT.setLine(E1left); :}
			  |
			  (Statement_StatementList) LEFT_BRACE StatementList:S1 RIGHT_BRACE {: RESULT=new Statement_StatementList(S1); RESULT.setLine(S1left); :};
			  
MayPrintNumConst ::= (MayPrintNumConst_NUMBER) COMMA NUMBER:N1 {: RESULT=new MayPrintNumConst_NUMBER(N1); RESULT.setLine(N1left); :}
					 |
					 (MayPrintNumConst_EPSILON) {: RESULT=new MayPrintNumConst_EPSILON(); :} /* epsilon */
					 ;
			  
			  

/*** DesignatorStatement = Designator (Assignop Expr | "(" [ActPars] ")" | "++" | "--")
						   |
						  "[" [Designator] {"," [Designator]}"]" "=" Designator.
 ***/
 
DesignatorStatement ::= (DesignatorSt_Assign) Designator:D1 Assignop:A2 Expr:E3 {: RESULT=new DesignatorSt_Assign(D1, A2, E3); RESULT.setLine(D1left); :}
					    | 
					    (DesignatorStatement_ERROR) error:e
					    {: parser.report_error("OPORAVAK od greske u iskazu dodele izvrsen do ; u liniji " + eleft, null);  :} {: RESULT=new DesignatorStatement_ERROR(); :}
					    |
					    (DesignatorStat_INC) Designator:D1 INCREMENT {: RESULT=new DesignatorStat_INC(D1); RESULT.setLine(D1left); :}
					    |
					    (DesignatorStat_DEC) Designator:D1 DECREMENT {: RESULT=new DesignatorStat_DEC(D1); RESULT.setLine(D1left); :}
						|
						(DesignatorStatement_List) LEFT_BRACKET DesignatorStatementList:D1 RIGHT_BRACKET EQUALS Designator:D2 {: RESULT=new DesignatorStatement_List(D1, D2); RESULT.setLine(D1left); :};
						
DesignatorStatementList ::= (DesignatorStatementList_MORE)  DesignatorStatementList:D1 COMMA MayDesignator:M2 {: RESULT=new DesignatorStatementList_MORE(D1, M2); RESULT.setLine(D1left); :}
							|
							(DesignatorStatementList_ONE) MayDesignator:M1 {: RESULT=new DesignatorStatementList_ONE(M1); RESULT.setLine(M1left); :};

MayDesignator ::= (MayDesignator_Designator) Designator:D1 {: RESULT=new MayDesignator_Designator(D1); RESULT.setLine(D1left); :}
				  |
				  (MayDesignator_EPSILON) {: RESULT=new MayDesignator_EPSILON(); :} /* epsilon */
				  ;							


/*** Expr = ["-"] Term [Addop Term]. ***/

//Expr ::= (Expr) ExprList;
		
Expr ::= (Expr_ONE) Term:T1 {: RESULT=new Expr_ONE(T1); RESULT.setLine(T1left); :} // ExprList
		 |
		 (Expr_MORE) Expr:E1 Addop:A2 Term:T3 {: RESULT=new Expr_MORE(E1, A2, T3); RESULT.setLine(E1left); :};
		


/*** Term = Factor {Mulop Factor}. ***/

// Term ::= (Term) TermList;
		
Term ::= (Term_ONE) FactorSign:F1 {: RESULT=new Term_ONE(F1); RESULT.setLine(F1left); :} // TermList
		 |
		 (Term_MORE) Term:T1 Mulop:M2 FactorSign:F3 {: RESULT=new Term_MORE(T1, M2, F3); RESULT.setLine(T1left); :};			  
			  
		
			  
/*** Factor = Designator
			  | numConst
			  | charConst
 			  | boolConst
			  | "new" Type ( "[" Expr "]" )
			  | "(" Expr ")".
***/
			  
FactorSign ::= (FactorSign) UnaryMinus:U1 Factor:F2 {: RESULT=new FactorSign(U1, F2); RESULT.setLine(U1left); :};

UnaryMinus ::= (UnaryMinus_MINUS) MINUS {: RESULT=new UnaryMinus_MINUS(); :}
			   |
			   (UnaryMinus_EPSILON) {: RESULT=new UnaryMinus_EPSILON(); :} /* epsilon */
			   ;

Factor ::= (Factor_Designator) Designator:D1 {: RESULT=new Factor_Designator(D1); RESULT.setLine(D1left); :}
		   |
		   (Factor_NUMBER) NUMBER:N1 {: RESULT=new Factor_NUMBER(N1); RESULT.setLine(N1left); :}
		   |
		   (Factor_CHARACTER) CHARACTER:C1 {: RESULT=new Factor_CHARACTER(C1); RESULT.setLine(C1left); :}
		   |
		   (Factor_BOOLEAN) BOOLEAN:B1 {: RESULT=new Factor_BOOLEAN(B1); RESULT.setLine(B1left); :}
		   |
		   (Factor_NEW) NEW Type:T1 LEFT_BRACKET Expr:E2 RIGHT_BRACKET {: RESULT=new Factor_NEW(T1, E2); RESULT.setLine(T1left); :}
		   |
		   (Factor_Expr) LEFT_PARENTHESIS Expr:E1 RIGHT_PARENTHESIS {: RESULT=new Factor_Expr(E1); RESULT.setLine(E1left); :}
		   ;



/*** Designator = ident {"[" Expr "]"}. ***/

Designator ::= (Designator_ONE) IDENTIFIER:I1 {: RESULT=new Designator_ONE(I1); RESULT.setLine(I1left); :}
			   |
			   (Designator_ARRAY) DesignatorArrayName:D1 LEFT_BRACKET Expr:E2 RIGHT_BRACKET {: RESULT=new Designator_ARRAY(D1, E2); RESULT.setLine(D1left); :};
			   
DesignatorArrayName ::= (DesignatorArrayName) IDENTIFIER:I1 {: RESULT=new DesignatorArrayName(I1); RESULT.setLine(I1left); :};



/*** Assignop = "=". ***/

Assignop ::= (Assignop) EQUALS {: RESULT=new Assignop(); :};



/*** Addop = "+" | "-". ***/

Addop ::= (Addop_PLUS) PLUS {: RESULT=new Addop_PLUS(); :}
		  |
		  (Addop_MINUS) MINUS {: RESULT=new Addop_MINUS(); :}
		  ;



/*** Mulop = "*" | "/" | "%". ***/

Mulop ::= (Mulop_MUL) MULTIPLICATION {: RESULT=new Mulop_MUL(); :}
		  |
		  (Mulop_DIV) DIVISION {: RESULT=new Mulop_DIV(); :}
		  |
		  (Mulop_MOD) MODULUS {: RESULT=new Mulop_MOD(); :}
		  ;
