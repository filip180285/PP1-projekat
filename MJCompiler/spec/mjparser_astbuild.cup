package rs.ac.bg.etf.pp1;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

parser code {:

	boolean errorDetected;
	
	Logger log = Logger.getLogger(getClass());
   
   
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("\nSintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
    }


:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal PROGRAM, CONST, NEW, PRINT, READ, RETURN, VOID, GOTO;
terminal String IDENTIFIER;
terminal Integer NUMBER; 
terminal Character CHARACTER;
terminal Integer BOOLEAN;
terminal PLUS, MINUS, MULTIPLICATION, DIVISION, MODULUS, EQUALS, INCREMENT, DECREMENT;
terminal SEMICOLON, COLON, COMMA, LEFT_PARENTHESIS, RIGHT_PARENTHESIS, LEFT_BRACKET, RIGHT_BRACKET, LEFT_BRACE, RIGHT_BRACE;

nonterminal Program Program;
nonterminal ConstVarDeclList ConstVarDeclList;
nonterminal ConstDeclList ConstDeclList;
nonterminal VarDeclList VarDeclList;
nonterminal Type Type;
nonterminal ConstDeclOneOrMore ConstDeclOneOrMore;
nonterminal ConstDecl ConstDecl;
nonterminal Constant Constant;
nonterminal VarDeclOneOrMore VarDeclOneOrMore;
nonterminal VarDecl VarDecl;
nonterminal MethodDecl MethodDecl;


/*** Program = "program" ident {ConstDecl | VarDecl | ClassDecl } "{" {MethodDecl} "}". ***/

Program ::= (Program) PROGRAM IDENTIFIER:I1 ConstVarDeclList:C2 {: RESULT=new Program(I1, C2); RESULT.setLine(I1left); :};

ConstVarDeclList ::= (ConstVarDeclList_CONST) ConstVarDeclList:C1 ConstDeclList:C2 {: RESULT=new ConstVarDeclList_CONST(C1, C2); RESULT.setLine(C1left); :}
					 | 
					 (ConstVarDeclList_VAR) ConstVarDeclList:C1 VarDeclList:V2 {: RESULT=new ConstVarDeclList_VAR(C1, V2); RESULT.setLine(C1left); :}
					 |
					 (ConstVarDeclList_EPSILON) {: RESULT=new ConstVarDeclList_EPSILON(); :} /* epsilon */
					 ;
					 
/*** ConstDecl = "const" Type ident"="(numConst | charConst | boolConst) {, ident "=" (numConst | charConst | boolConst)} ";". ***/

ConstDeclList ::= (ConstDeclList) CONST Type:T1 ConstDeclOneOrMore:C2 SEMICOLON {: RESULT=new ConstDeclList(T1, C2); RESULT.setLine(T1left); :};	// const int x = 2;	const int y = 3, z = 5;

ConstDeclOneOrMore ::= (ConstDeclOneOrMore_MORE) ConstDecl:C1 COMMA ConstDeclOneOrMore:C2 {: RESULT=new ConstDeclOneOrMore_MORE(C1, C2); RESULT.setLine(C1left); :}
					   |
					   (ConstDeclOneOrMore_ONE) ConstDecl:C1 {: RESULT=new ConstDeclOneOrMore_ONE(C1); RESULT.setLine(C1left); :};

ConstDecl ::= (ConstDecl) IDENTIFIER:I1 EQUALS Constant:C2 {: RESULT=new ConstDecl(I1, C2); RESULT.setLine(I1left); :};

Constant ::= (Constant_NUMBER) NUMBER:N1 {: RESULT=new Constant_NUMBER(N1); RESULT.setLine(N1left); :}
			 | 
			 (Constant_CHARACTER) CHARACTER:C1 {: RESULT=new Constant_CHARACTER(C1); RESULT.setLine(C1left); :}
			 |
			 (Constant_BOOLEAN) BOOLEAN:B1 {: RESULT=new Constant_BOOLEAN(B1); RESULT.setLine(B1left); :};
			 
Type ::= (Type) IDENTIFIER:I1 {: RESULT=new Type(I1); RESULT.setLine(I1left); :};

/*** VarDecl = Type ident ["[" "]"] {"," ident ["[" "]"]} ";". ***/

VarDeclList ::= (VarDeclList) Type:T1 VarDeclOneOrMore:V2 SEMICOLON {: RESULT=new VarDeclList(T1, V2); RESULT.setLine(T1left); :};	// int x; int y, z, niz[];

VarDeclOneOrMore ::= (VarDeclOneOrMore_MORE) VarDecl:V1 COMMA VarDeclOneOrMore:V2 {: RESULT=new VarDeclOneOrMore_MORE(V1, V2); RESULT.setLine(V1left); :}
					 |
					 (VarDeclOneOrMore_ONE) VarDecl:V1 {: RESULT=new VarDeclOneOrMore_ONE(V1); RESULT.setLine(V1left); :};

VarDecl ::= (VarDecl_VAR) IDENTIFIER:I1 {: RESULT=new VarDecl_VAR(I1); RESULT.setLine(I1left); :}
			|
			(VarDecl_ARRAY) IDENTIFIER:I1 LEFT_BRACKET RIGHT_BRACKET {: RESULT=new VarDecl_ARRAY(I1); RESULT.setLine(I1left); :};



















